// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/therenotomorrow/tmdb/pkg/tmdb"
)

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function for the type MockClient
func (_mock *MockClient) Close() error {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func() error); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockClient_Expecter) Close() *MockClient_Close_Call {
	return &MockClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockClient_Close_Call) Run(run func()) *MockClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Close_Call) Return(err error) *MockClient_Close_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockClient_Close_Call) RunAndReturn(run func() error) *MockClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetNowPlayingMovies provides a mock function for the type MockClient
func (_mock *MockClient) GetNowPlayingMovies(ctx context.Context, page int) ([]tmdb.Movie, error) {
	ret := _mock.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for GetNowPlayingMovies")
	}

	var r0 []tmdb.Movie
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tmdb.Movie, error)); ok {
		return returnFunc(ctx, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tmdb.Movie); ok {
		r0 = returnFunc(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tmdb.Movie)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetNowPlayingMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNowPlayingMovies'
type MockClient_GetNowPlayingMovies_Call struct {
	*mock.Call
}

// GetNowPlayingMovies is a helper method to define mock.On call
//   - ctx
//   - page
func (_e *MockClient_Expecter) GetNowPlayingMovies(ctx interface{}, page interface{}) *MockClient_GetNowPlayingMovies_Call {
	return &MockClient_GetNowPlayingMovies_Call{Call: _e.mock.On("GetNowPlayingMovies", ctx, page)}
}

func (_c *MockClient_GetNowPlayingMovies_Call) Run(run func(ctx context.Context, page int)) *MockClient_GetNowPlayingMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetNowPlayingMovies_Call) Return(movies []tmdb.Movie, err error) *MockClient_GetNowPlayingMovies_Call {
	_c.Call.Return(movies, err)
	return _c
}

func (_c *MockClient_GetNowPlayingMovies_Call) RunAndReturn(run func(ctx context.Context, page int) ([]tmdb.Movie, error)) *MockClient_GetNowPlayingMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetPopularMovies provides a mock function for the type MockClient
func (_mock *MockClient) GetPopularMovies(ctx context.Context, page int) ([]tmdb.Movie, error) {
	ret := _mock.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for GetPopularMovies")
	}

	var r0 []tmdb.Movie
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tmdb.Movie, error)); ok {
		return returnFunc(ctx, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tmdb.Movie); ok {
		r0 = returnFunc(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tmdb.Movie)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetPopularMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPopularMovies'
type MockClient_GetPopularMovies_Call struct {
	*mock.Call
}

// GetPopularMovies is a helper method to define mock.On call
//   - ctx
//   - page
func (_e *MockClient_Expecter) GetPopularMovies(ctx interface{}, page interface{}) *MockClient_GetPopularMovies_Call {
	return &MockClient_GetPopularMovies_Call{Call: _e.mock.On("GetPopularMovies", ctx, page)}
}

func (_c *MockClient_GetPopularMovies_Call) Run(run func(ctx context.Context, page int)) *MockClient_GetPopularMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetPopularMovies_Call) Return(movies []tmdb.Movie, err error) *MockClient_GetPopularMovies_Call {
	_c.Call.Return(movies, err)
	return _c
}

func (_c *MockClient_GetPopularMovies_Call) RunAndReturn(run func(ctx context.Context, page int) ([]tmdb.Movie, error)) *MockClient_GetPopularMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetTopRatedMovies provides a mock function for the type MockClient
func (_mock *MockClient) GetTopRatedMovies(ctx context.Context, page int) ([]tmdb.Movie, error) {
	ret := _mock.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for GetTopRatedMovies")
	}

	var r0 []tmdb.Movie
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tmdb.Movie, error)); ok {
		return returnFunc(ctx, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tmdb.Movie); ok {
		r0 = returnFunc(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tmdb.Movie)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetTopRatedMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTopRatedMovies'
type MockClient_GetTopRatedMovies_Call struct {
	*mock.Call
}

// GetTopRatedMovies is a helper method to define mock.On call
//   - ctx
//   - page
func (_e *MockClient_Expecter) GetTopRatedMovies(ctx interface{}, page interface{}) *MockClient_GetTopRatedMovies_Call {
	return &MockClient_GetTopRatedMovies_Call{Call: _e.mock.On("GetTopRatedMovies", ctx, page)}
}

func (_c *MockClient_GetTopRatedMovies_Call) Run(run func(ctx context.Context, page int)) *MockClient_GetTopRatedMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetTopRatedMovies_Call) Return(movies []tmdb.Movie, err error) *MockClient_GetTopRatedMovies_Call {
	_c.Call.Return(movies, err)
	return _c
}

func (_c *MockClient_GetTopRatedMovies_Call) RunAndReturn(run func(ctx context.Context, page int) ([]tmdb.Movie, error)) *MockClient_GetTopRatedMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetUpcomingMovies provides a mock function for the type MockClient
func (_mock *MockClient) GetUpcomingMovies(ctx context.Context, page int) ([]tmdb.Movie, error) {
	ret := _mock.Called(ctx, page)

	if len(ret) == 0 {
		panic("no return value specified for GetUpcomingMovies")
	}

	var r0 []tmdb.Movie
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) ([]tmdb.Movie, error)); ok {
		return returnFunc(ctx, page)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) []tmdb.Movie); ok {
		r0 = returnFunc(ctx, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tmdb.Movie)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, page)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockClient_GetUpcomingMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUpcomingMovies'
type MockClient_GetUpcomingMovies_Call struct {
	*mock.Call
}

// GetUpcomingMovies is a helper method to define mock.On call
//   - ctx
//   - page
func (_e *MockClient_Expecter) GetUpcomingMovies(ctx interface{}, page interface{}) *MockClient_GetUpcomingMovies_Call {
	return &MockClient_GetUpcomingMovies_Call{Call: _e.mock.On("GetUpcomingMovies", ctx, page)}
}

func (_c *MockClient_GetUpcomingMovies_Call) Run(run func(ctx context.Context, page int)) *MockClient_GetUpcomingMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *MockClient_GetUpcomingMovies_Call) Return(movies []tmdb.Movie, err error) *MockClient_GetUpcomingMovies_Call {
	_c.Call.Return(movies, err)
	return _c
}

func (_c *MockClient_GetUpcomingMovies_Call) RunAndReturn(run func(ctx context.Context, page int) ([]tmdb.Movie, error)) *MockClient_GetUpcomingMovies_Call {
	_c.Call.Return(run)
	return _c
}
